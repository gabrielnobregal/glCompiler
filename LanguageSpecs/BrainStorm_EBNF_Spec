==glLanguage - Grammar Specs==

Program = {importSource} {classDecl}
Import = {"importar" fileName ";"ra};
classDecl =  {"classe" identifier "{" {VarDecl | ExecutionUnit} "}" };
VarDecl = Type identifier ";" // Nao se pode inicializar a linguagem fora do método
Type = (inteiro | real | texto) ["[""]"]

ExecutionUnit = (Function | Method)
Function = "funcao" identifier "(" [Parameters] "):" identifier CodeBlock
Method = "metodo" identifier "(" [Parameters] ")" CodeBlock
CodeBlock = "{" {VarDeclIntern | Statement} "}"

//Uma variavel interna deve ser inicializada quando é declarada internamente
VarDeclIntern = Type identifier ("=" ("instanciar" | "alocar" "("integer")") 
				| "=" (integer | number | character | text | identifier) ) ";"

Expr = ["-"] Term {AddOp Term}
Term = Factor {MulOp Factor}
Factor =   Designator
	 | DesignatorFunc[ActPars] 
	 | numberConst
	 | charConst
         | instanciar "(" ident ")"
	 | alocar "(" Expr ")"
	 | "(" Expr ")"

Designator = identifier ["[" Expr "]"] { . Designator } // Termina com um atributo de vetor ou normal
DesignatorFunc = [ identifier ["[" Expr "]"] . ] {  Designator . } identifier //Obriga a terminar com o identificador que é o nome do método

AddOp = "+" | "-"
MulOp = "*" | "/" | "%"
ActPars = "(" [Expr {"," Expr }] ")" // Parametros do método


Statement =   Designator "=" Expr ";"
	    | DesignatorFunc ActPars ";"
	    | "se" "(" Condition ")" Statement ["else" Statement]
	    | "enquanto" "(" Condition ")" Statement
            | "retornar" [Expr] ";"
	    | "lerInteiro" "(" ")" ";"
	    | "lerTexto" "(" ")" ";"
	    | "lerCaracter" "(" ")" ";"
	    | "lerReal" "(" ")" ";" // Ponto Flutuante
	    | "imprimir" "(" Expr ")" 	
	    | CodeBlock

Condition = Expr RelOp Expr
RelOp = "==" | "<" | ">" | "<=" | ">="

==glLanguage - Basic Features ==

importar "teste.gl"

classe Base {
	inteiro x;
	inteiro y;
}

classe Teste {
		
	// Somente declara mas não pode instanciar
	inteiro[] p;
	real x;
	caractere[] z;
	texto k;
	texto l;

	metodo imprimir() {	
		inteiro a = 50; // Ao declarar dentro do método tem que definir um valor
		inteiro b = 20;
		Base base = instanciar(Base);
		base.x = 5;
		base.y = 10;		
	}

	funcao calcular(inteiro a, inteiro b) : inteiro {
		retornar a * b;		
	}

	metodo inicio() { // Vai ser o método main da classe so pode haver um método main no programa
		
		p -> alocar(10); // Um vetor deve ter seu espaço alocado antes de ser usado
		p[0] = 2*2;
		
		if(k = 10) {
			inteiro b = 50; //Declaracao dentro de escopo
		}	
	}

}
